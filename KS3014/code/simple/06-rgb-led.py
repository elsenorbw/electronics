import RPi.GPIO as GPIO
import time


def brighten(the_pulsewidthmodulation):
    for this_brightness in range(0, 101, 1):
        the_pulsewidthmodulation.ChangeDutyCycle(this_brightness)
        time.sleep(0.01)


def darken(the_pulsewidthmodulation):
    for this_brightness in range(100, -1, -1):
        the_pulsewidthmodulation.ChangeDutyCycle(this_brightness)
        time.sleep(0.01)


# the positive side of the LED circuit is on GPIO pin 18 (I hope)
red_pin = 24
green_pin = 23
blue_pin = 18


gradient = [
    "#fafa6e",
    "#e6f56f",
    "#d3f072",
    "#c0eb75",
    "#ade578",
    "#9cdf7c",
    "#8ad97f",
    "#7ad283",
    "#69cb86",
    "#5ac489",
    "#4abd8c",
    "#3bb58e",
    "#2bad8f",
    "#1aa68f",
    "#059e8f",
    "#00968e",
    "#008e8c",
    "#008689",
    "#007e86",
    "#027681",
    "#106e7c",
    "#196676",
    "#1f5e6f",
    "#245768",
    "#284f60",
    "#2a4858",
]

mega_gradient = [
    "#B0171F",
    "#DC143C",
    "#FFB6C1",
    "#FFAEB9",
    "#EEA2AD",
    "#CD8C95",
    "#8B5F65",
    "#FFC0CB",
    "#FFB5C5",
    "#EEA9B8",
    "#CD919E",
    "#8B636C",
    "#DB7093",
    "#FF82AB",
    "#EE799F",
    "#CD6889",
    "#8B475D",
    "#EEE0E5",
    "#CDC1C5",
    "#8B8386",
    "#FF3E96",
    "#EE3A8C",
    "#CD3278",
    "#8B2252",
    "#FF69B4",
    "#FF6EB4",
    "#EE6AA7",
    "#CD6090",
    "#8B3A62",
    "#872657",
    "#EE1289",
    "#CD1076",
    "#8B0A50",
    "#FF34B3",
    "#EE30A7",
    "#CD2990",
    "#8B1C62",
    "#C71585",
    "#D02090",
    "#EE7AE9",
    "#CD69C9",
    "#8B4789",
    "#D8BFD8",
    "#FFE1FF",
    "#EED2EE",
    "#CDB5CD",
    "#8B7B8B",
    "#FFBBFF",
    "#EEAEEE",
    "#CD96CD",
    "#8B668B",
    "#DDA0DD",
    "#EE82EE",
    "#FF00FF",
    "#EE00EE",
    "#CD00CD",
    "#800080",
    "#BA55D3",
    "#E066FF",
    "#D15FEE",
    "#B452CD",
    "#7A378B",
    "#9400D3",
    "#9932CC",
    "#BF3EFF",
    "#B23AEE",
    "#9A32CD",
    "#68228B",
    "#4B0082",
    "#8A2BE2",
    "#9B30FF",
    "#912CEE",
    "#7D26CD",
    "#551A8B",
    "#9370DB",
    "#AB82FF",
    "#9F79EE",
    "#8968CD",
    "#5D478B",
    "#483D8B",
    "#8470FF",
    "#7B68EE",
    "#6A5ACD",
    "#836FFF",
    "#7A67EE",
    "#6959CD",
    "#473C8B",
    "#F8F8FF",
    "#E6E6FA",
    "#0000FF",
    "#0000EE",
    "#0000CD",
    "#00008B",
    "#000080",
    "#191970",
    "#3D59AB",
    "#4169E1",
    "#4876FF",
    "#436EEE",
    "#3A5FCD",
    "#27408B",
    "#6495ED",
    "#B0C4DE",
    "#CAE1FF",
    "#BCD2EE",
    "#A2B5CD",
    "#6E7B8B",
    "#778899",
    "#708090",
    "#C6E2FF",
    "#B9D3EE",
    "#9FB6CD",
    "#6C7B8B",
    "#1C86EE",
    "#1874CD",
    "#104E8B",
    "#F0F8FF",
    "#4682B4",
    "#63B8FF",
    "#5CACEE",
    "#4F94CD",
    "#36648B",
    "#87CEFA",
    "#B0E2FF",
    "#A4D3EE",
    "#8DB6CD",
    "#607B8B",
    "#87CEFF",
    "#7EC0EE",
    "#6CA6CD",
    "#4A708B",
    "#87CEEB",
    "#00B2EE",
    "#009ACD",
    "#00688B",
    "#33A1C9",
    "#ADD8E6",
    "#BFEFFF",
    "#B2DFEE",
    "#9AC0CD",
    "#68838B",
    "#B0E0E6",
    "#98F5FF",
    "#8EE5EE",
    "#7AC5CD",
    "#53868B",
    "#00F5FF",
    "#00E5EE",
    "#00C5CD",
    "#00868B",
    "#5F9EA0",
    "#00CED1",
    "#F0FFFF",
    "#E0EEEE",
    "#C1CDCD",
    "#838B8B",
    "#D1EEEE",
    "#B4CDCD",
    "#7A8B8B",
    "#BBFFFF",
    "#96CDCD",
    "#668B8B",
    "#2F4F4F",
    "#97FFFF",
    "#8DEEEE",
    "#79CDCD",
    "#528B8B",
    "#00FFFF",
    "#00EEEE",
    "#00CDCD",
    "#008B8B",
    "#008080",
    "#48D1CC",
    "#20B2AA",
    "#03A89E",
    "#40E0D0",
    "#808A87",
    "#00C78C",
    "#76EEC6",
    "#458B74",
    "#00FA9A",
    "#F5FFFA",
    "#00FF7F",
    "#00EE76",
    "#00CD66",
    "#008B45",
    "#3CB371",
    "#54FF9F",
    "#4EEE94",
    "#43CD80",
    "#00C957",
    "#BDFCC9",
    "#3D9140",
    "#E0EEE0",
    "#C1CDC1",
    "#838B83",
    "#8FBC8F",
    "#C1FFC1",
    "#B4EEB4",
    "#9BCD9B",
    "#698B69",
    "#98FB98",
    "#9AFF9A",
    "#7CCD7C",
    "#548B54",
    "#32CD32",
    "#228B22",
    "#00FF00",
    "#00EE00",
    "#00CD00",
    "#008B00",
    "#008000",
    "#006400",
    "#308014",
    "#7CFC00",
    "#76EE00",
    "#66CD00",
    "#458B00",
    "#ADFF2F",
    "#CAFF70",
    "#BCEE68",
    "#A2CD5A",
    "#6E8B3D",
    "#556B2F",
    "#6B8E23",
    "#C0FF3E",
    "#B3EE3A",
    "#698B22",
    "#FFFFF0",
    "#EEEEE0",
    "#CDCDC1",
    "#8B8B83",
    "#F5F5DC",
    "#EEEED1",
    "#CDCDB4",
    "#8B8B7A",
    "#FAFAD2",
    "#FFFF00",
    "#EEEE00",
    "#CDCD00",
    "#8B8B00",
    "#808069",
    "#808000",
    "#BDB76B",
    "#FFF68F",
    "#EEE685",
    "#CDC673",
    "#8B864E",
    "#F0E68C",
    "#EEE8AA",
    "#EEE9BF",
    "#CDC9A5",
    "#8B8970",
    "#FFEC8B",
    "#EEDC82",
    "#CDBE70",
    "#8B814C",
    "#E3CF57",
    "#FFD700",
    "#EEC900",
    "#CDAD00",
    "#8B7500",
    "#FFF8DC",
    "#EEE8CD",
    "#CDC8B1",
    "#8B8878",
    "#DAA520",
    "#FFC125",
    "#EEB422",
    "#CD9B1D",
    "#8B6914",
    "#B8860B",
    "#FFB90F",
    "#EEAD0E",
    "#CD950C",
    "#8B6508",
    "#FFA500",
    "#EE9A00",
    "#CD8500",
    "#8B5A00",
    "#FFFAF0",
    "#FDF5E6",
    "#F5DEB3",
    "#FFE7BA",
    "#EED8AE",
    "#CDBA96",
    "#8B7E66",
    "#FFE4B5",
    "#FFEFD5",
    "#FFEBCD",
    "#EECFA1",
    "#CDB38B",
    "#8B795E",
    "#FCE6C9",
    "#D2B48C",
    "#9C661F",
    "#FF9912",
    "#FAEBD7",
    "#FFEFDB",
    "#EEDFCC",
    "#CDC0B0",
    "#8B8378",
    "#DEB887",
    "#FFD39B",
    "#EEC591",
    "#CDAA7D",
    "#8B7355",
    "#FFE4C4",
    "#EED5B7",
    "#CDB79E",
    "#8B7D6B",
    "#E3A869",
    "#ED9121",
    "#FF8C00",
    "#FF7F00",
    "#EE7600",
    "#CD6600",
    "#8B4500",
    "#FF8000",
    "#FFA54F",
    "#EE9A49",
    "#CD853F",
    "#8B5A2B",
    "#FAF0E6",
    "#EECBAD",
    "#CDAF95",
    "#8B7765",
    "#FFF5EE",
    "#EEE5DE",
    "#CDC5BF",
    "#8B8682",
    "#F4A460",
    "#C76114",
    "#D2691E",
    "#FF7F24",
    "#EE7621",
    "#CD661D",
    "#292421",
    "#FF7D40",
    "#FF6103",
    "#8A360F",
    "#A0522D",
    "#FF8247",
    "#EE7942",
    "#CD6839",
    "#8B4726",
    "#EE9572",
    "#CD8162",
    "#8B5742",
    "#FF7F50",
    "#EE4000",
    "#CD3700",
    "#8B2500",
    "#5E2612",
    "#E9967A",
    "#FF8C69",
    "#EE8262",
    "#CD7054",
    "#8B4C39",
    "#FF7256",
    "#EE6A50",
    "#CD5B45",
    "#8B3E2F",
    "#8A3324",
    "#FF6347",
    "#EE5C42",
    "#CD4F39",
    "#8B3626",
    "#FA8072",
    "#EED5D2",
    "#CDB7B5",
    "#8B7D7B",
    "#FFFAFA",
    "#EEE9E9",
    "#CDC9C9",
    "#8B8989",
    "#BC8F8F",
    "#FFC1C1",
    "#EEB4B4",
    "#CD9B9B",
    "#8B6969",
    "#F08080",
    "#CD5C5C",
    "#FF6A6A",
    "#EE6363",
    "#8B3A3A",
    "#CD5555",
    "#A52A2A",
    "#FF4040",
    "#EE3B3B",
    "#CD3333",
    "#8B2323",
    "#B22222",
    "#FF3030",
    "#EE2C2C",
    "#CD2626",
    "#8B1A1A",
    "#FF0000",
    "#EE0000",
    "#CD0000",
    "#8B0000",
    "#800000",
    "#8E388E",
    "#7171C6",
    "#7D9EC0",
    "#388E8E",
    "#71C671",
    "#8E8E38",
    "#C5C1AA",
    "#C67171",
    "#555555",
    "#1E1E1E",
    "#282828",
    "#515151",
    "#5B5B5B",
    "#848484",
    "#8E8E8E",
    "#AAAAAA",
    "#B7B7B7",
    "#C1C1C1",
    "#EAEAEA",
    "#F4F4F4",
    "#FFFFFF",
    "#DCDCDC",
    "#D3D3D3",
    "#C0C0C0",
    "#A9A9A9",
    "#808080",
    "#696969",
    "#000000",
    "#FCFCFC",
    "#FAFAFA",
    "#F7F7F7",
    "#F2F2F2",
    "#F0F0F0",
    "#EDEDED",
    "#EBEBEB",
    "#E8E8E8",
    "#E5E5E5",
    "#E3E3E3",
    "#E0E0E0",
    "#DEDEDE",
    "#DBDBDB",
    "#D9D9D9",
    "#D6D6D6",
    "#D4D4D4",
    "#D1D1D1",
    "#CFCFCF",
    "#CCCCCC",
    "#C9C9C9",
    "#C7C7C7",
    "#C4C4C4",
    "#C2C2C2",
    "#BFBFBF",
    "#BDBDBD",
    "#BABABA",
    "#B8B8B8",
    "#B5B5B5",
    "#B3B3B3",
    "#B0B0B0",
    "#ADADAD",
    "#ABABAB",
    "#A8A8A8",
    "#A6A6A6",
    "#A3A3A3",
    "#A1A1A1",
    "#9E9E9E",
    "#9C9C9C",
    "#999999",
    "#969696",
    "#949494",
    "#919191",
    "#8F8F8F",
    "#8C8C8C",
    "#8A8A8A",
    "#878787",
    "#858585",
    "#828282",
    "#7F7F7F",
    "#7D7D7D",
    "#7A7A7A",
    "#787878",
    "#757575",
    "#737373",
    "#707070",
    "#6E6E6E",
    "#6B6B6B",
    "#696969",
    "#666666",
    "#636363",
    "#616161",
    "#5E5E5E",
    "#5C5C5C",
    "#595959",
    "#575757",
    "#545454",
    "#525252",
    "#4F4F4F",
    "#4D4D4D",
    "#4A4A4A",
    "#474747",
    "#454545",
    "#424242",
    "#404040",
    "#3D3D3D",
    "#3B3B3B",
    "#383838",
    "#363636",
    "#333333",
    "#303030",
    "#2E2E2E",
    "#2B2B2B",
    "#292929",
    "#262626",
    "#242424",
    "#212121",
    "#1F1F1F",
    "#1C1C1C",
    "#1A1A1A",
    "#171717",
    "#141414",
    "#121212",
    "#0F0F0F",
    "#0D0D0D",
    "#0A0A0A",
    "#080808",
    "#050505",
    "#030303",
]


# use the GPIO numbering system
GPIO.setmode(GPIO.BCM)


def configure_pin(the_pin):
    # set the pin as an output pin
    GPIO.setup(the_pin, GPIO.OUT)

    # and turn it off
    GPIO.output(the_pin, GPIO.LOW)

    # and configure it for 100HZ pulse width modulation
    pulse_width_modulation = GPIO.PWM(the_pin, 100)
    pulse_width_modulation.start(0)

    return pulse_width_modulation


def set_rgb(pulse_width_modulations, red_value, green_value, blue_value):
    pulse_width_modulations[0].ChangeDutyCycle(red_value)
    pulse_width_modulations[1].ChangeDutyCycle(green_value)
    pulse_width_modulations[2].ChangeDutyCycle(blue_value)


def hex_to_percentage(the_hex_str):
    hex_val = int(the_hex_str, 16)
    the_percentage = hex_val / 255 * 100
    the_percentage = int(the_percentage)
    # be very sure it's in the range we want
    return min(max(the_percentage, 0), 100)


def display_hex_colour(pulse_width_modulations, the_hex):
    red_hex = the_hex[1:3]
    green_hex = the_hex[3:5]
    blue_hex = the_hex[5:7]

    red_val = hex_to_percentage(red_hex)
    green_val = hex_to_percentage(green_hex)
    blue_val = hex_to_percentage(blue_hex)

    print(
        f"Hex is {red_hex}:{green_hex}:{blue_hex} -> {red_val},{green_val},{blue_val}"
    )
    set_rgb(pulse_width_modulations, red_val, green_val, blue_val)


def bounce_gradient(pulse_width_modulations, gradient_hex_values):
    for this_hex_value in gradient_hex_values:
        display_hex_colour(pulse_width_modulations, this_hex_value)
        time.sleep(0.1)
    time.sleep(2)
    for this_hex_value in reversed(gradient_hex_values):
        display_hex_colour(pulse_width_modulations, this_hex_value)
        time.sleep(0.1)


def walk_gradient(pulse_width_modulations, gradient_hex_values):
    for this_hex_value in gradient_hex_values:
        display_hex_colour(pulse_width_modulations, this_hex_value)
        time.sleep(0.1)


# create a pulse width modulation
pwm_red = configure_pin(red_pin)
pwm_green = configure_pin(green_pin)
pwm_blue = configure_pin(blue_pin)
pwms = [pwm_red, pwm_green, pwm_blue]

# quick rgb-test
for _ in range(5):
    set_rgb(pwms, 100, 0, 0)
    time.sleep(0.2)
    set_rgb(pwms, 0, 100, 0)
    time.sleep(0.2)
    set_rgb(pwms, 0, 0, 100)
    time.sleep(0.2)

# and now the smooth, gradient groove..
bounce_gradient(pwms, gradient)

# and the massive one..
walk_gradient(pwms, mega_gradient)

# stop all the pulse width modulations..
for this_pwm in pwms:
    this_pwm.stop()

# and cleanup
GPIO.cleanup()
